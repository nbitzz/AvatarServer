import axios from "axios"
import FormData from "form-data";
import { getCSRF, readPromise, getVerificationToken, getUserId } from "./util.js";
import path, {dirname} from "path";
import { fileURLToPath } from "url";
import { createReadStream, writeFile } from "fs";
import https from "https"

const __dirname = dirname(fileURLToPath(import.meta.url));

export default class UploaderApi {
    token = null;

    constructor(token) {
        this.token = token;
    }

    /**
     * 
     * @param {string} filepath
     * @param {string} name
     * @description Uploads T-Shirt to Roblox and returns its assetID
     * @returns Promise<number>
     */

    async UploadTShirt(filepath,name) {
        return new Promise(async (resolve,reject) => {
            let form = new FormData()
            
            let veritoken = await getVerificationToken("https://www.roblox.com/build/upload?assetTypeId=2",this.token)

            // I essentially almost gave up here, sorry for the bad code
            
            form.append("assetTypeId",2)
            form.append("file",await readPromise(filepath),{filename:path.basename(filepath),contentType:`image/${path.basename(filepath).split(".")[path.basename(filepath).split(".").length-1].toLowerCase()}`})
            form.append("config",Buffer.from(JSON.stringify({
                name:name,
                description:"Autogenerated via AvatarServer",
                creatorTargetId:await getUserId(),
                creatorType:"User"
            })),{filename:"config.json",contentType:"application/json"})
            form.append("name",name)
            form.append("groupId",'')
            form.append("__RequestVerificationToken",veritoken.input)
            
            form.submit({
                host:"itemconfiguration.roblox.com",
                path:"/v1/avatar-assets/2/upload",
                protocol:"https:",
                headers:{
                    Cookie: `.ROBLOSECURITY=${this.token};__RequestVerificationToken=${veritoken.header[1]};`,
                    "X-CSRF-Token":await getCSRF(this.token),
                    "Referer":"https://www.roblox.com/build/upload?AssetTypeId=2&GroupId="
                },
                method:"POST"
            },(err,res) => {
                if (err) {reject(new Error(err))}
                if (!res) {reject(new Error("no res"));return}
                let data = ""
                res.on("error",(e) => {
                    reject(new Error(e))
                })
                res.on("data",(chunk) => {
                    data += chunk
                })
                res.on("end",() => {
                    if (res.statusCode == 200) {
                       resolve(JSON.parse(data).assetId)
                    } else {
                        reject(new Error(`${res.statusCode} ${res.statusMessage}: ${data}`))
                    }
                })
            })
            /*axios.post("https://www.roblox.com/build/upload",form,{
                headers: {
                    Cookie: `.ROBLOSECURITY=${this.token};${veritoken.header[0]}`,
                    "X-CSRF-Token":await getCSRF(this.token),
                    "Content-Type":"multipart/form-data"
                }
            }).then((res) => {
                if (res.status == 302) {
                    let location = res.headers.location
                    let id = (location.match(/\d+$/)||[])[0]
                    if (location.indexOf("/build/upload") === -1) {
                        reject(new Error("Unknown redirect. " + location))
                    }
                    resolve(id)
                } else {
                    writeFile(__dirname+"/../generated/uploadercrash.txt",`${res.status} ${res.statusText}\n\n${res.data}`,() => {
                        reject(new Error(`${res.status} ${res.statusText}`))
                    })
                }
            })*/
            /*
            return axios.post("https://www.roblox.com/build/upload",form.getBuffer(),{headers:{
                Cookie: `.ROBLOSECURITY=${this.token};__RequestVerificationHeader=${veritoken.header};`,
                "X-CSRF-Token":await getCSRF(this.token),
                ...form.getHeaders()
            }}).then(async (res) => {
                if (res.statusCode == 302) {
                    let location = res.headers.location
                    let id = location.match(/\d+$/)
                    if (location.indexOf("/build/upload") === -1) {
                        reject(new Error("Unknown redirect. " + location))
                    }
                    resolve(id)
                } else {
                    resolve(new Error(JSON.stringify(res.data)))
                }
            })*/
        })
    }
}